---
title: API Reference - Mesh(p3d.)
url: https://www.ursinaengine.org/api_reference.html#Ursina#Mesh(p3d.)
scraped_at: Sun Dec 29 13:49:59 2024
---

# Mesh(p3d.)

| Mesh.} |  |
| --- | --- |
| .vertices = vertices |  |
| .triangles = triangles |  |
| .colors = colors |  |
| .uvs = uvs |  |
| .normals = normals |  |
| .static = static |  |
| .mode = mode |  |
| .thickness = thickness |  |
| .render_points_in_3d = render_points_in_3d |  |
| .vertex_buffer = vertex_buffer |  |
| .vertex_buffer_length = vertex_buffer_length |  |
| .vertex_buffer_format = vertex_buffer_format |  |
| .indices |  |
| --- | --- |
| .generated_vertices |  |
| .render_points_in_3d |  |
| .thickness |  |
| generate() |  |
| --- | --- |
| recipe() |  |
| serialize( vertex_decimal_limit=4, color_decimal_limit=4, uv_decimal_limit=4, normal_decimal_limit=4 ) |  |
| generate_normals( smooth=True, regenerate=True ) |  |
| colorize( left=color.white, right=color.blue, down=color.red, up=color.green, back=color.white, forward=color.white, smooth=True, world_space=True, strength=1 ) |  |
| project_uvs( aspect_ratio=1, direction='forward' ) |  |
| clear( regenerate=True ) |  |
| save( name='', folder:Path=Func(getattr, application, 'compressed_models_folder'), flip_faces=False, vertex_decimal_limit=5, color_decimal_limit=4 ) |  |
fromursinaimport*
app = Ursina()

e =Entity(position=(0,0),model=Mesh(vertices=[(-.5,0,0), (.5,0,0), (0,1,0)]))

e =Entity(position=(1,0),model=Mesh(vertices=((-.5,0,0), (.5,0,0), (0,1,0))))
Text(parent=e,text='triangle mesh\nwith verts as tuple of tuples',y=1,scale=5,origin=(0,-.5))

e =Entity(position=(0,-2),model=Mesh(vertices=[[-.5,0,0], [.5,0,0], [0,1,0]]))
Text(parent=e,text='triangle mesh\nwith verts as list of lists',y=1,scale=5,origin=(0,-.5))

e =Entity(position=(1,-2),model=Mesh(vertices=([-.5,0,0], [.5,0,0], [0,1,0])
))
Text(parent=e,text='triangle mesh\nwith verts as tuple of lists',y=1,scale=5,origin=(0,-.5))

e =Entity(position=(0,-4),model=Mesh(vertices=[Vec3(-.5,0,0), Vec3(.5,0,0), Vec3(0,1,0)],
))
Text(parent=e,text='triangle mesh\nwith verts as list Vec3',y=1,scale=5,origin=(0,-.5))


e =Entity(position=(1,-4),model=Mesh(vertices=[Vec3(-.5,0,0), Vec3(.5,0,0), Vec3(0,1,0)],
    triangles = [0,1,2],
))
Text(parent=e,text='triangle mesh\nwith tris as flat list',y=1,scale=5,origin=(0,-.5))

e =Entity(position=(2.5,0),model=Mesh(vertices=[Vec3(-.5,0,0), Vec3(.5,0,0), Vec3(0,1,0)],
    triangles = [(0,1,2), (2,1,0)],# should be double sided))
Text(parent=e,text='triangle mesh\nwith tris as list of triangles',y=1,scale=5,origin=(0,-.5))


continious_line =Entity(position=(4,0),model=Mesh(vertices=(Vec3(0,0,0), Vec3(.6,.3,0), Vec3(1,1,0), Vec3(.6,1.7,0), Vec3(0,2,0)),mode='line',thickness=4,
    ),color=color.cyan)
Text(parent=continious_line,text='continious_line',y=1,scale=5)

line_segments =Entity(position=(4,-2),model=Mesh(vertices=(Vec3(0,0,0), Vec3(.6,.3,0), Vec3(1,1,0), Vec3(.6,1.7,0), Vec3(0,2,0)),triangles= ((0,1), (3,4)),mode='line',thickness=4,
    ),color=color.magenta)
Text(parent=line_segments,text='line_segments',y=1,scale=5)

points =Entity(position=(6,0),model=Mesh(vertices=(Vec3(0,0,0), Vec3(.6,.3,0), Vec3(1,1,0), Vec3(.6,1.7,0), Vec3(0,2,0)),mode='point',thickness=.05),color=color.red)
Text(parent=points,text='points',y=1,scale=5)

points_2d =Entity(position=(6,-2),model=Mesh(vertices=(Vec3(0,0,0), Vec3(.6,.3,0), Vec3(1,1,0), Vec3(.6,1.7,0), Vec3(0,2,0)),mode='point',thickness=10, render_points_in_3d=False),color=color.red)
Text(parent=points_2d,text='points_2d',y=1,scale=5)

quad =Entity(position=(8,0),model=Mesh(vertices=((0.5,0.5,0.0), (-0.5,0.5,0.0), (-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5, -0.5,0.0)),uvs=((1,1), (0,1), (0,0), (1,0), (1,1), (0,0)),mode='triangle'),texture='shore')
Text(parent=quad,text='quad_with_uvs',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(8,-2),model=Mesh(vertices=((0.5,0.5,0.0), (-0.5,0.5,0.0), (-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5, -0.5,0.0)),uvs=((1,1), (0,1), (0,0), (1,0), (1,1), (0,0)),normals=[(-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0)],mode='triangle'),
    )
Text(parent=quad,text='quad_with_normals',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(8,-4),model=Mesh(vertices=((0.5,0.5,0.0), (-0.5,0.5,0.0), (-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5, -0.5,0.0)),uvs=((1,1), (0,1), (0,0), (1,0), (1,1), (0,0)),normals=[(-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0)],mode='triangle'),
    )
Text(parent=quad,text='quad_with_usv_and_normals',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(8,-6),model=Mesh(vertices=((0.5,0.5,0.0), (-0.5,0.5,0.0), (-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5, -0.5,0.0)),uvs=((1,1), (0,1), (0,0), (1,0), (1,1), (0,0)),normals=[(-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0), (-0.0,0.0, -1.0)],colors=[color.red, color.yellow, color.green, color.cyan, color.blue, color.magenta],mode='triangle'),
    )
Text(parent=quad,text='quad_with_usv_and_normals_and_vertex_colors',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(10,0),model=Mesh(vertices=((-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5,0.5,0.0)),triangles=(0,1,2,2,3,0),mode='triangle'),
    )
Text(parent=quad,text='triangles flat',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(10,-2),model=Mesh(vertices=((-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5,0.5,0.0)),triangles=((0,1,2), (2,3,0)),mode='triangle'),
    )
Text(parent=quad,text='triangles triplets',y=1,scale=5,origin=(0,-.5))

quad =Entity(position=(10,-4),model=Mesh(vertices=((-0.5, -0.5,0.0), (0.5, -0.5,0.0), (0.5,0.5,0.0), (-0.5,0.5,0.0)),triangles=((0,1,2,3), (0,3,2)),mode='triangle'),
    )
Text(parent=quad,text='triangles quad + tri',y=1,scale=5,origin=(0,-.5))

copy_test =Entity(position=(12,0),model=copy(quad.model))
Text(parent=copy_test,text='copy_test',y=1,scale=5,origin=(0,-.5))

deepcopy_test =Entity(position=(12,-2),model=deepcopy(quad.model))
Text(parent=deepcopy_test,text='deepcopy_test',y=1,scale=5,origin=(0,-.5))

clear_test =Entity(position=(12,-4),model=deepcopy(quad.model))
clear_test.model.clear()
Text(parent=clear_test,text='.clear() test',y=1,scale=5,origin=(0,-.5))


window.color = color.black
EditorCamera()print(load_model('sphere', application.internal_models_compressed_folder, use_deepcopy=True).serialize())
app.run()

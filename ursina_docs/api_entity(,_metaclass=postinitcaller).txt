---
title: API Reference - Entity(, metaclass=PostInitCaller)
url: https://www.ursinaengine.org/api_reference.html#Ursina#Entity(,_metaclass=PostInitCaller)
scraped_at: Sun Dec 29 13:49:59 2024
---

# Entity(, metaclass=PostInitCaller)

| Entity.rotation_directions = (-1,-1,1) |  |
| --- | --- |
| .name = camel_to_snake(self.__class__.__name__) |  |
| .ignore = False | if True, will not try to run code. |
| .ignore_paused = False | if True, will still run when application is paused. useful when making a pause menu for example. |
| .ignore_input = False |  |
| .parent = scene | default parent is scene, which means it's in 3d space. to use UI space, set the parent to camera.ui instead. |
| .add_to_scene_entities = add_to_scene_entities | set to False to be ignored by the engine, but still get rendered. |
| .scripts = [] | add with add_script(class_instance). will assign an 'entity' variable to the script. |
| .animations = [] |  |
| .hovered = False | will return True if mouse hovers entity. |
| .line_definition = None | returns a Traceback(filename, lineno, function, code_context, index). |
| .enabled = enabled |  |
| .enabled | disabled entities will not be visible nor run code. |
| --- | --- |
| .model | set model with model='model_name' (without file type extension) |
| .color |  |
| .eternal | eternal entities does not get destroyed on scene.clear() |
| .double_sided |  |
| .render_queue | for custom sorting in case of conflict. To sort things in 2d, set .z instead of using this. |
| .parent |  |
| .loose_parent |  |
| .world_parent | change the parent, but keep position, rotation and scale |
| .types | get all class names including those this inhertits from. |
| .visible |  |
| .visible_self | set visibility of self, without affecting children. |
| .collider | set to 'box'/'sphere'/'capsule'/'mesh' for auto fitted collider. |
| .collision | toggle collision without changing collider. |
| .on_click |  |
| .origin |  |
| .origin_x |  |
| .origin_y |  |
| .origin_z |  |
| .world_position |  |
| .world_x |  |
| .world_y |  |
| .world_z |  |
| .position | right, up, forward. can also set self.x, self.y, self.z |
| .x |  |
| .y |  |
| .z |  |
| .X | shortcut for int(entity.x) |
| .Y | shortcut for int(entity.y) |
| .Z | shortcut for int(entity.z) |
| .world_rotation |  |
| .world_rotation_x |  |
| .world_rotation_y |  |
| .world_rotation_z |  |
| .rotation | can also set self.rotation_x, self.rotation_y, self.rotation_z |
| .rotation_x |  |
| .rotation_y |  |
| .rotation_z |  |
| .quaternion |  |
| .world_scale |  |
| .world_scale_x |  |
| .world_scale_y |  |
| .world_scale_z |  |
| .scale | can also set self.scale_x, self.scale_y, self.scale_z |
| .scale_x |  |
| .scale_y |  |
| .scale_z |  |
| .transform | get/set position, rotation and scale |
| .world_transform | get/set world_position, world_rotation and world_scale |
| .forward | get forward direction. |
| .back | get backwards direction. |
| .right | get right direction. |
| .left | get left direction. |
| .up | get up direction. |
| .down | get down direction. |
| .screen_position | get screen position(ui space) from world space. |
| .shader |  |
| .shader_input |  |
| .material | a way to set shader, texture, texture_scale, texture_offset and shader inputs in one go |
| .texture | set model with texture='texture_name'. requires a model to be set beforehand. |
| .texture_scale | how many times the texture should repeat, eg. texture_scale=(8,8). |
| .texture_offset |  |
| .tileset_size | if the texture is a tileset, say how many tiles there are so it only use one tile of the texture, e.g. tileset_size=[8,4] |
| .tile_coordinate | set the tile coordinate, starts in the lower left. |
| .alpha | shortcut for setting color's transparency/opacity |
| .always_on_top |  |
| .unlit | set to True to ignore light and not cast shadows |
| .billboard | set to True to make this Entity always face the camera. |
| .wireframe | set to True to render model as wireframe |
| .model_bounds |  |
| .bounds |  |
| .flipped_faces |  |
| .children |  |
| .loose_children |  |
| .attributes | attribute names. used by duplicate(). |
| enable() | same as .enabled = True |
| --- | --- |
| disable() | same as .enabled = False |
| get_shader_input( name ) |  |
| set_shader_input( name, value ) |  |
| generate_sphere_map( size=512, name=f'sphere_map_{len(scene.entities)}' ) |  |
| generate_cube_map( size=512, name=f'cube_map_{len(scene.entities)}' ) |  |
| get_position( relative_to=scene ) | get position relative to on other Entity. In most cases, use .position instead. |
| set_position( value, relative_to=scene ) | set position relative to on other Entity. In most cases, use .position instead. |
| rotate( value, relative_to=None ) | rotate around local axis. |
| add_script( class_instance ) |  |
| combine( analyze=False, auto_destroy=True, ignore=[], ignore_disabled=True, include_normals=False ) |  |
| look_at( target, axis='forward', up=None ) | up defaults to self.up |
| look_at_2d( target, axis='z' ) |  |
| look_at_xy( target ) |  |
| look_at_xz( target ) |  |
| has_ancestor( possible_ancestor ) |  |
| has_disabled_ancestor() |  |
| get_changes( target_class=None ) | returns a dict of all the changes |
| animate( name, value, duration=.1, delay=0, curve=curve.in_expo, loop=False, resolution=None, interrupt='kill', time_step=None, unscaled=False, auto_play=True, auto_destroy=True ) |  |
| animate_position( value, duration=.1, **kwargs ) |  |
| animate_rotation( value, duration=.1,  **kwargs ) |  |
| animate_scale( value, duration=.1, **kwargs ) |  |
| animate_{e}( value, duration=.1, delay=0, unscaled=False, **kwargs ) |  |
| shake( duration=.2, magnitude=1, speed=.05, direction=(1,1), delay=0, attr_name='position', interrupt='finish', unscaled=False ) |  |
| animate_color( value, duration=.1, interrupt='finish', unscaled=False, **kwargs ) |  |
| fade_out( value=0, duration=.5, unscaled=False, **kwargs ) |  |
| fade_in( value=1, duration=.5, **kwargs ) |  |
| blink( value=ursina.color.clear, duration=.1, delay=0, curve=curve.in_expo_boomerang, interrupt='finish', **kwargs ) |  |
| intersects( traverse_target=scene, ignore:list=None, debug=False ) |  |
fromursinaimport*
app = Ursina()

e =Entity(model='quad',color=color.orange,position=(0,0,1),scale=1.5,rotation=(0,0,45),texture='brick')'''example of inheriting Entity'''class Player(Entity):def__init__(self, **kwargs):
        super().__init__()
        self.model='cube'self.color = color.red
        self.scale_y =2forkey, value in kwargs.items():setattr(self, key, value)definput(self, key):ifkey =='space':
            self.animate_x(2, duration=1)defupdate(self):
        self.x += held_keys['d'] * time.dt *10self.x -= held_keys['a'] * time.dt *10player = Player(x=-1)

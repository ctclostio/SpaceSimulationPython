---
title: API Reference - boxcast
url: https://www.ursinaengine.org/api_reference.html#Ursina#boxcast
scraped_at: Sun Dec 29 13:49:59 2024
---

# boxcast

| boxcast(origin, direction=(0,0,1), distance=9999, thickness=(1,1), traverse_target=scene, ignore:list=None, debug=False) | similar to raycast, but with width and height |
| --- | --- |
fromursinaimportUrsina, held_keys, camera, duplicate, raycast, time, EditorCamera
app = Ursina()'''
Casts a ray from *origin*, in *direction*, with length *distance* and returns
a HitInfo containing information about what it hit. This ray will only hit entities with a collider.

Use optional *traverse_target* to only be able to hit a specific entity and its children/descendants.
Use optional *ignore* list to ignore certain entities.
Setting debug to True will draw the line on screen.

Example where we only move if a wall is not hit:'''class Player(Entity):defupdate(self):
        self.direction = Vec3(
            self.forward * (held_keys['w'] - held_keys['s'])
            + self.right * (held_keys['d'] - held_keys['a'])
            ).normalized()# get the direction we're trying to walk in.origin = self.world_position + (self.up*.5)# the ray should start slightly up from the ground so we can walk up slopes or walk over small objects.hit_info = raycast(origin , self.direction,ignore=(self,), distance=.5, debug=False)ifnothit_info.hit:
            self.position += self.direction *5* time.dt

Player(model='cube', origin_y=-.5,color=color.orange)
wall_left =Entity(model='cube',collider='box', scale_y=3, origin_y=-.5,color=color.azure, x=-4)
wall_right = duplicate(wall_left, x=4)
camera.y =2app.run()
